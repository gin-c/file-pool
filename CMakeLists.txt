CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

PROJECT (filepool)

SET(CPP_THIRD_STORE_DIR ${PROJECT_SOURCE_DIR}/third/)

IF (CMAKE_SYSTEM_NAME MATCHES "Linux")
	MESSAGE(STATUS "current platform: Linux")
	SET (OS "LINUX")
	IF (USE_32BIT)
		SET (FILE_PREFIX "")
		SET (OUTPUT_PATH_SUFFIX "linux32")
		SET (WITH_64BIT FALSE)
	ELSE ()
		SET (FILE_PREFIX "64")
		SET (OUTPUT_PATH_SUFFIX "linux64")	
		SET (WITH_64BIT TRUE)
	ENDIF()
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Windows")  
	MESSAGE(STATUS "current platform: Windows")
	SET (OS "WINDOWS")
	SET (VS_WIN32 "VC/bin/cl.exe")
	SET (VS_WIN64 "VC/bin/x86_amd64/cl.exe")
	IF (DEFINED ENV{VS100COMNTOOLS})
		STRING (REPLACE "\\" "/" VS100COMNTOOLS $ENV{VS100COMNTOOLS})
		STRING (REPLACE "/Common7/Tools/" "" VS2010_COMPILER ${VS100COMNTOOLS})
	ENDIF ()
	IF (DEFINED ENV{VS140COMNTOOLS})
		STRING (REPLACE "\\" "/" VS140COMNTOOLS $ENV{VS140COMNTOOLS})
		STRING (REPLACE "/Common7/Tools/" "" VS2015_COMPILER ${VS140COMNTOOLS})
	ENDIF ()
ELSE ()
	MESSAGE(STATUS "other platform: ${CMAKE_SYSTEM_NAME}") 
ENDIF ()

IF (${OS} STREQUAL "LINUX")	
	IF (${PLATFORM_TYPE} MATCHES "arm")
		SET(OUTPUT_PATH ${PLATFORM_TYPE}_${PLATFORM_NAME})
	ELSE()
		IF (WITH_64BIT)
			SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m64")
			SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64")
			SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -m64")
		ELSE()
			SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m32") 
			SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32")  
			SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -m32")     
		ENDIF()
		SET (OUTPUT_PATH gcc_${OUTPUT_PATH_SUFFIX})
	ENDIF()
		  
	IF (${CMAKE_BUILD_TYPE} STREQUAL "Debug")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}  -g -Wall -fPIC -Wl,--whole-archive -lpthread  -Wl,--no-whole-archive -Wl,-rpath=./ -lc -ldl")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -Wall -std=c++11 -fPIC -Wl,--whole-archive -lpthread  -Wl,--no-whole-archive -Wl,-rpath=./ -lc -ldl")
	ELSE()
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}  -O3 -Os -fPIC -Wl,--whole-archive -lpthread  -Wl,--no-whole-archive -Wl,-rpath=./ -lc -ldl")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -O2 -Os -fPIC -Wl,--whole-archive -lpthread  -Wl,--no-whole-archive -Wl,-rpath=./ -lc -ldl")
	ENDIF()	
		
ELSEIF (${OS} STREQUAL "WINDOWS")
	IF (${CMAKE_C_COMPILER} STREQUAL ${VS2010_COMPILER}/${VS_WIN32})
		SET (OUTPUT_PATH "vs2010_win32")
		SET (FILE_PREFIX "")
		SET (WITH_64BIT FALSE)
	ELSEIF (${CMAKE_C_COMPILER} STREQUAL ${VS2010_COMPILER}/${VS_WIN64})
		SET (OUTPUT_PATH "vs2010_win64")
		SET (FILE_PREFIX "64")
		SET (WITH_64BIT TRUE)
	ELSEIF (${CMAKE_C_COMPILER} STREQUAL ${VS2015_COMPILER}/${VS_WIN32})
		SET (OUTPUT_PATH "vs2015_win32")
		SET (FILE_PREFIX "")
		SET (WITH_64BIT FALSE)
	ELSEIF (${CMAKE_C_COMPILER} STREQUAL ${VS2015_COMPILER}/${VS_WIN64})
		SET (OUTPUT_PATH "vs2015_win64")
		SET (FILE_PREFIX "64")
		SET (WITH_64BIT TRUE)
	ELSEIF (${CMAKE_C_COMPILER} STREQUAL "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.16.27023/bin/Hostx86/x86/cl.exe")
		SET (OUTPUT_PATH "vs2017_win32")
		SET (FILE_PREFIX "")
		SET (WITH_64BIT FALSE)
	ELSEIF (${CMAKE_C_COMPILER} STREQUAL "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.16.27023/bin/Hostx86/x64/cl.exe")
		SET (OUTPUT_PATH "vs2017_win64")
		SET (FILE_PREFIX "64")
		SET (WITH_64BIT TRUE)
	ENDIF()
ELSE ()
	SET (OUTPUT_PATH "unknown")
ENDIF ()

IF (NOT DEFINED CMAKE_DEBUG_POSTFIX)
	SET (CMAKE_DEBUG_POSTFIX "_d")
ENDIF ()

SET (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/bin/${OUTPUT_PATH}/)
SET (CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/bin/${OUTPUT_PATH}/)
SET (CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/lib/${OUTPUT_PATH}/)
SET (EXECUTABLE_OUTPUT_DIR ${PROJECT_SOURCE_DIR}/bin/${OUTPUT_PATH}/)
#Install path
SET (INSTALL_BIN_DIR ${CMAKE_INSTALL_PREFIX}/bin/${OUTPUT_PATH})
SET (INSTALL_LIB_DIR ${CMAKE_INSTALL_PREFIX}/lib/${OUTPUT_PATH})

SET (LINK_LIBRARIES_DIR
${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}
)

ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/demo)
ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/file_pool)